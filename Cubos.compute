// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct Cube {
    float3 position;
    float4 color;
    float velo1;
    float velo2;
    float massa;
    float deltem;
    float3 posicaonovo;
};

RWStructuredBuffer<Cube> cubes;

float rand(float2 co)
{
    return (frac(sin(dot(co.xy, float2(12.9898, 78233))) * 43758.5453)) * 1;
}

[numthreads(20, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{

    Cube cube = cubes[id.x];


    cube.velo2 += 9.8f * cube.deltem;

    cube.posicaonovo.y -= (cube.velo1 + cube.velo2) * cube.deltem / 2;
    cube.velo1 = cube.velo2;


    cubes[id.x] = cube;
}
